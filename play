#!/usr/local/bin/python3
import yt_dlp, argparse, time, json, os
import pygame as pg

def path(string : str):
    return os.path.expanduser(string)
    

parser = argparse.ArgumentParser(description='save and play youtube mp3s from the command line.')

parser.add_argument("name", help="name of song to play or add", type=str, nargs="?", default=None)
parser.add_argument("-a", "--add", help="Add a new mp3 to the playlist from the given youtube url", type=str)
parser.add_argument("-v", "--volume", help="Set the volume of the player", type=float)

parser.add_argument("--config", help="prints the config file", action="store_true")
parser.add_argument("--store", help="prints all songs in the store", action="store_true")

args = parser.parse_args()

config_ref : str = path("~/scripts/.playconfig.json")
config : dict = json.load(open(config_ref))
dump_config = lambda : json.dump(config, open(config_ref, "w"), indent=4)

songs = {f.split(".")[0] : "song" for f in os.listdir(path("~/scripts/music")) if len(f.split(".")[0]) > 0} # get all the names of the files in the music folder and playlists
playlists = {k : "playlist" for k in config["playlists"].keys()}
used_names = {**songs, **playlists}

def play(name: str) -> bool:
    if not name in songs: 
        return False
    
    print(f"Playing {name}")
    pg.mixer.init()
    pg.mixer.music.load(path(f"~/scripts/music/{name}.mp3"))
    pg.mixer.music.set_volume(config["volume"])
    pg.mixer.music.play()
    
    config["previus"] = name
    dump_config()
    
    while pg.mixer.music.get_busy(): 
        time.sleep(1)
    
    return True

def playlist(name: str):
    print("\nContent {")
    for song in config["playlists"][name]:
        print(f"    {song}")    
    print("}")
        
    for song in config["playlists"][name]:
        play(song)
    
    return True

def volume():
    config["volume"] = args.volume
    dump_config()

def add():
    if args.name in used_names:
        print(f"Name {args.name} already exists as a {used_names[args.name]}")
        quit()
    
    options = {
            'format': 'bestaudio/best',
            'outtmpl': path(f"~/scripts/music/{args.name}"),
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
        }

    ydl = yt_dlp.YoutubeDL(options)
    ydl.download([args.add])
    
    print(f"Added {args.name} to store")

def print_config():
    print("\nConfig: {")
    for k, v in config.items():
        print(f"    {k}: {v}")
    print("}")

def print_store():
    print("\nStore: {")
    for name in songs.keys():
        print(f"    {name}")
    print("}")

if args.config: 
    print_config()
    quit()
if args.store: 
    print_store()
    quit()
if args.volume: volume()

if args.name == "previus": play(config["previus"]) 

elif args.name and not args.add: 
    if not play(args.name) and args.name in config["playlists"]:
        playlist(args.name)
        
else:
    if args.add: add()