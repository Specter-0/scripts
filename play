#!/usr/local/bin/python3
import yt_dlp, argparse, time, json, os, subprocess
import pygame as pg

# To use this script you need to have the following installed:
# - yt-dlp
# - pygame
# - ffmpeg
# - python3

def path(string : str):
    return os.path.expanduser(string)
    

parser = argparse.ArgumentParser(description='save and play youtube mp3s from the command line.')

parser.add_argument("name", help="name of song to play or add", type=str, nargs="?", default=None)
parser.add_argument("-a", "--add", help="Add a new mp3 to the store from the given youtube url", type=str, nargs=2)
parser.add_argument("-v", "--volume", help="Set the volume of the player", type=float)
parser.add_argument("-l", "--playlist", help="select a playlist, if it does not exist creates a new one, params after will be added to list", type=str, nargs="*")
parser.add_argument("-d", "--delete", help="delete a song or playlist, if selection a playlist and a arg is passed, will remove that song for the playlist", type=str, nargs="*")
parser.add_argument("-r", "--repeat", help="repeat chosen song", action="store_true")

parser.add_argument("--config", help="prints the config file", action="store_true")
parser.add_argument("--store", help="prints all songs in the store", action="store_true")

args = parser.parse_args()

config_ref : str = path("~/scripts/.playconfig.json")
config : dict = json.load(open(config_ref))
dump_config = lambda : json.dump(config, open(config_ref, "w"), indent=4)

songs = {f.split(".")[0] : "song" for f in os.listdir(path("~/scripts/music")) if len(f.split(".")[0]) > 0} # get all the names of the files in the music folder and playlists
playlists = {k : "playlist" for k in config["playlists"].keys()}
used_names = {**songs, **playlists}

def play(name: str) -> bool:
    if not name in songs and name in playlists.keys(): 
        print("\nContent {")
        for song in config["playlists"][name]:
            print(f"    {song}")    
        print("}")
            
        for song in config["playlists"][name]:
            play(song)
    
    elif not name in songs:
        print(f"Name {name} not found")
        return False
    
    print(f"Playing {name}")
    pg.mixer.init()
    pg.mixer.music.load(path(f"~/scripts/music/{name}.mp3"))
    pg.mixer.music.set_volume(config["volume"])
    pg.mixer.music.play()
    
    song_len = pg.mixer.Sound(path(f"~/scripts/music/{name}.mp3")).get_length()
    
    config["previus"] = name
    dump_config()
    
    while pg.mixer.music.get_busy(): 
        subprocess.run(["clear"])
        print(f"Playing {name}")
        
        print("Duration: |", end="")
        for i in range(0, 50):
            if i < int(pg.mixer.music.get_pos() / 1000 / song_len * 50):
                print("â–ˆ", end="")
            else:
                print("-", end="")
        print("|", end="")
        
        print("", int(pg.mixer.music.get_pos() / 1000), "|", int(song_len - int(pg.mixer.music.get_pos() / 1000)))
        
        time.sleep(0.2)
      
    return True

def playlist():
    if len(args.playlist) == 0:
        print("No playlist name given")
        quit()
    
    if not args.playlist[0] in playlists.keys():
        config["playlists"][args.playlist[0]] = [song for song in args.playlist[1:] if song in songs.keys()]
        print(f"{[song for song in args.playlist[1:] if not song in songs.keys()]} is not in the store and will not be added to the playlist")
        dump_config()
        
        return
    
    if len(args.playlist) > 1:
        config["playlists"][args.playlist[0]] = [song for song in args.playlist[1:] if song in songs.keys()] + config["playlists"][args.playlist[0]]
        print(f"{[song for song in args.playlist[1:] if not song in songs.keys()]} is not in the store and will not be added to the playlist")
        dump_config()
        
        return

def volume():
    config["volume"] = args.volume
    dump_config()

def add():
    if args.add[0] in used_names:
        print(f"Name {args.add[0]} already exists as a {used_names[args.add[0]]}")
        quit()
    
    options = {
            'format': 'bestaudio/best',
            'outtmpl': path(f"~/scripts/music/{args.add[0]}"),
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
        }

    ydl = yt_dlp.YoutubeDL(options)
    ydl.download([args.add[1]])
    
    print(f"Added {args.add[0]} to store")

def print_config():
    print("\nConfig: {")
    for k, v in config.items():
        print(f"    {k}: {v}")
    print("}")

def print_store():
    print("\nStore: {")
    for name in songs.keys():
        print(f"    {name}")
    print("}")

def delete():
    if len(args.delete) == 0:
        print("No name to delete")
        quit()
    
    if args.delete[0] in songs:
        os.remove(path(f"~/scripts/music/{args.delete[0]}.mp3"))
        print(f"Deleted {args.delete[0]}")
        
    elif args.delete[0] in playlists.keys():
        if len(args.delete) > 1:
            for song in args.delete[1:]:
                config["playlists"][args.delete[0]].remove(song)
                print(f"Removed {song} from {args.delete[0]}")
        else:
            del config["playlists"][args.delete[0]]
            print(f"Deleted {args.delete}")
    else:
        print(f"Name {args.delete[0]} not found in store")

    dump_config()


def repeat(name : str):
    while True:
        play(name)

if args.config: 
    print_config()
    quit()
if args.store: 
    print_store()
    quit()
if args.delete: 
    delete()
    quit()

if isinstance(args.volume, (int, float, complex)) and not isinstance(args.volume, bool): volume()

if args.playlist: 
    playlist()
    quit()

if args.name == "previus": play(config["previus"]) 

if args.repeat:
    repeat(args.name)
    quit()

elif args.name and not args.add: 
    if not play(args.name) and args.name in config["playlists"]:
        playlist(args.name)
        
else:
    if args.add: add()
